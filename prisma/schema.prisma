// Fear City Cycles Database Schema
// Designed for Square API integration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product Categories
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  
  @@map("categories")
}

// Products (Motorcycles & Gear)
model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  shortDescription String?
  price           Decimal  @db.Decimal(10, 2)
  compareAtPrice  Decimal? @db.Decimal(10, 2)
  sku             String   @unique
  barcode         String?
  weight          Decimal? @db.Decimal(8, 2)
  dimensions      Json?    // {length, width, height}
  
  // Inventory
  trackQuantity   Boolean  @default(true)
  quantity        Int      @default(0)
  lowStockAlert   Int      @default(5)
  
  // Product Details
  specifications  Json?    // Technical specs
  features        String[] // Array of feature strings
  tags            String[] // For search/filtering
  
  // Media
  images          String[] // Array of image URLs
  primaryImage    String?
  
  // SEO & Display
  metaTitle       String?
  metaDescription String?
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  sortOrder       Int      @default(0)
  
  // Relationships
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  orderItems      OrderItem[]
  cartItems       CartItem[]
  
  @@map("products")
}

// Customer Management
model Customer {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  dateOfBirth   DateTime?
  
  // Square Customer ID for payment processing
  squareCustomerId String? @unique
  
  // Preferences
  acceptsMarketing Boolean @default(false)
  notes            String?
  tags             String[]
  
  // Statistics
  totalSpent       Decimal @default(0) @db.Decimal(10, 2)
  orderCount       Int     @default(0)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastOrderAt      DateTime?
  
  // Relations
  addresses        Address[]
  orders           Order[]
  cart             Cart?
  
  @@map("customers")
}

// Customer Addresses
model Address {
  id           String  @id @default(cuid())
  type         String  // 'shipping', 'billing'
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  state        String
  zip          String
  country      String  @default("US")
  phone        String?
  isDefault    Boolean @default(false)
  
  customerId   String
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  
  @@map("addresses")
}

// Shopping Cart (for logged-in users)
model Cart {
  id         String     @id @default(cuid())
  customerId String     @unique
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  items      CartItem[]
  
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId])
  @@map("cart_items")
}

// Orders
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  
  // Square Integration
  squareOrderId   String?     @unique
  squarePaymentId String?     @unique
  
  // Customer
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  
  // Contact Info (for guest orders)
  email           String
  phone           String?
  
  // Addresses
  shippingAddressId String?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  // Pricing
  subtotal        Decimal @db.Decimal(10, 2)
  taxAmount       Decimal @db.Decimal(10, 2)
  shippingAmount  Decimal @db.Decimal(10, 2)
  discountAmount  Decimal @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal @db.Decimal(10, 2)
  
  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?       // 'card', 'cash', etc.
  
  // Fulfillment
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  trackingNumber    String?
  shippingCarrier   String?
  
  // Notes
  notes           String?
  customerNotes   String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processedAt     DateTime?
  fulfilledAt     DateTime?
  
  // Relations
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  quantity      Int
  price         Decimal @db.Decimal(10, 2) // Price at time of order
  totalPrice    Decimal @db.Decimal(10, 2)
  
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  
  // Product snapshot at time of order
  productName   String
  productSku    String
  productImage  String?
  
  createdAt     DateTime @default(now())
  
  @@map("order_items")
}

// Contact Form Submissions
model ContactSubmission {
  id          String            @id @default(cuid())
  type        ContactType       @default(GENERAL)
  status      SubmissionStatus  @default(NEW)
  
  // Contact Info
  firstName   String
  lastName    String
  email       String
  phone       String?
  company     String?
  
  // Message
  subject     String?
  message     String
  
  // Custom Build Details (if applicable)
  buildDetails Json?
  budget       String?
  timeline     String?
  
  // Admin Notes
  adminNotes  String?
  assignedTo  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  respondedAt DateTime?
  
  @@map("contact_submissions")
}

// Newsletter Subscriptions
model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String?
  lastName    String?
  isActive    Boolean  @default(true)
  source      String?  // 'website', 'checkout', etc.
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("newsletter_subscriptions")
}

// Admin Users
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed
  firstName String
  lastName  String
  role      AdminRole @default(STAFF)
  isActive  Boolean  @default(true)
  
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("admin_users")
}

// Settings/Configuration
model Setting {
  key       String @id
  value     Json
  
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  CANCELLED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum ContactType {
  GENERAL
  CUSTOM_BUILD
  PARTS_INQUIRY
  SERVICE
  WHOLESALE
  PRESS
}

enum SubmissionStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  STAFF
}