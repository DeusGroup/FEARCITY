name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install -g csso-cli uglify-js imagemin-cli imagemin-mozjpeg imagemin-pngquant imagemin-svgo imagemin-webp
          
      - name: Build and optimize site
        run: |
          # Copy all necessary files to build directory
          mkdir -p _site
          cp index.html _site/
          cp main.html _site/
          cp logo.svg _site/
          
          # Copy all directories with HTML files
          if [ -d "bikes" ]; then
            cp -r bikes _site/
          fi
          if [ -d "gear" ]; then
            cp -r gear _site/
          fi
          if [ -d "contact" ]; then
            cp -r contact _site/
          fi
          if [ -d "cart" ]; then
            cp -r cart _site/
          fi
          
          # Minify CSS
          csso styles.css --output _site/styles.css
          echo "CSS minified successfully"
          
          # Minify JavaScript
          uglifyjs script.js --compress --mangle --output _site/script.js
          echo "JavaScript minified successfully"
          
          # Create optimized images directory
          mkdir -p _site/assets/images
          
          # Copy and optimize images if they exist
          if [ -d "assets/images" ]; then
            # Copy images first
            cp -r assets/images/* _site/assets/images/ 2>/dev/null || true
            # Create WebP versions and optimize
            find _site/assets/images -name "*.jpg" -o -name "*.jpeg" | while read img; do
              # Create WebP version
              imagemin "$img" --plugin=webp --plugin.webp.quality=85 > "${img%.*}.webp" 2>/dev/null || true
              # Optimize original JPEG
              imagemin "$img" --plugin=mozjpeg --plugin.mozjpeg.quality=85 > "$img" 2>/dev/null || true
            done
            find _site/assets/images -name "*.png" | while read img; do
              # Create WebP version
              imagemin "$img" --plugin=webp --plugin.webp.quality=85 > "${img%.*}.webp" 2>/dev/null || true
              # Optimize original PNG
              imagemin "$img" --plugin=pngquant --plugin.pngquant.quality=65-90 > "$img" 2>/dev/null || true
            done
            # Optimize SVGs
            find _site/assets/images -name "*.svg" | xargs -I {} imagemin {} --plugin=svgo > {} 2>/dev/null || true
            echo "Images optimized and WebP versions created"
          fi
          
          # Copy other assets if they exist
          if [ -d "assets" ]; then
            find assets -type f ! -path "assets/images/*" -exec cp --parents {} _site/ \; 2>/dev/null || true
          fi
          
          # Copy reference images if they exist
          if [ -d "reference-images" ]; then
            cp -r reference-images _site/ 2>/dev/null || true
          fi
          
          # Add build info
          echo "<!-- Built on $(date) with optimization -->" >> _site/index.html
          
          echo "Build completed successfully"
          echo "Original CSS size: $(stat -c%s styles.css 2>/dev/null || echo 0) bytes"
          echo "Minified CSS size: $(stat -c%s _site/styles.css 2>/dev/null || echo 0) bytes"
          echo "Original JS size: $(stat -c%s script.js 2>/dev/null || echo 0) bytes"
          echo "Minified JS size: $(stat -c%s _site/script.js 2>/dev/null || echo 0) bytes"
          ls -la _site/
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4